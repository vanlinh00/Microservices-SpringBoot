package com.example.deliveryservice.config;

import com.example.deliveryservice.utils.JwtUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.core.Ordered;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;


/*
API Gateway trong h·ªá th·ªëng microservices ho·∫°t ƒë·ªông nh∆∞ m·ªôt reverse proxy,
 ƒëi·ªÅu ph·ªëi c√°c y√™u c·∫ßu t·ª´ client ƒë·∫øn c√°c d·ªãch v·ª• backend,
 gi√∫p qu·∫£n l√Ω routing, x√°c th·ª±c v√† gi√°m s√°t.
  N√≥ c≈©ng cung c·∫•p b·∫£o m·∫≠t v√† t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t,
  gi·∫£m t·∫£i cho c√°c microservices b·∫±ng c√°ch x·ª≠ l√Ω x√°c th·ª±c JWT,
  caching v√† rate limiting. üöÄ
 */

/*
V√≠ d·ª• v·ªÅ API Gateway trong h·ªá th·ªëng Microservices
T√¨nh hu·ªëng th·ª±c t·∫ø:
Gi·∫£ s·ª≠ b·∫°n c√≥ m·ªôt ·ª©ng d·ª•ng giao h√†ng v·ªõi c√°c microservices sau:

Auth Service (localhost:8080) ‚Üí X√°c th·ª±c ng∆∞·ªùi d√πng, c·∫•p JWT.

Order Service (localhost:8082) ‚Üí Qu·∫£n l√Ω ƒë∆°n h√†ng.

Delivery Service (localhost:8089) ‚Üí Qu·∫£n l√Ω v·∫≠n chuy·ªÉn.

C√°ch API Gateway ho·∫°t ƒë·ªông:
Client g·ª≠i y√™u c·∫ßu l·∫•y ƒë∆°n h√†ng:

http
GET http://localhost:9000/orders/123
Authorization: Bearer <JWT_TOKEN>
API Gateway ki·ªÉm tra JWT, n·∫øu h·ª£p l·ªá ‚Üí Chuy·ªÉn ti·∫øp y√™u c·∫ßu ƒë·∫øn Order Service (localhost:8082/orders/123).

Order Service x·ª≠ l√Ω y√™u c·∫ßu v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi.

API Gateway nh·∫≠n ph·∫£n h·ªìi v√† g·ª≠i l·∫°i cho Client.

L·ª£i √≠ch:
‚úÖ T·∫≠p trung x√°c th·ª±c JWT ‚Üí C√°c microservices kh√¥ng c·∫ßn t·ª± ki·ªÉm tra token.
‚úÖ ƒêi·ªÅu ph·ªëi y√™u c·∫ßu ‚Üí Client ch·ªâ c·∫ßn g·ªçi API Gateway thay v√¨ t·ª´ng service ri√™ng l·∫ª.
‚úÖ B·∫£o m·∫≠t v√† t·ªëi ∆∞u h√≥a ‚Üí C√≥ th·ªÉ th√™m caching, rate limiting, logging.

API Gateway gi√∫p h·ªá th·ªëng g·ªçn nh·∫π, b·∫£o m·∫≠t v√† d·ªÖ qu·∫£n l√Ω h∆°n trong ki·∫øn tr√∫c microservices! üöÄ

 */

@Component
public class AuthenticationFilter extends AbstractGatewayFilterFactory<AuthenticationFilter.Config> {

    public AuthenticationFilter() {
        super(Config.class);
    }

    @Override
    public GatewayFilter apply(Config config) {
        return (exchange, chain) -> {
            // Logic x√°c th·ª±c
            ServerHttpRequest request = exchange.getRequest();
            // V√≠ d·ª•: Ki·ªÉm tra JWT ho·∫∑c header n√†o ƒë√≥
            if (!request.getHeaders().containsKey("Authorization")) {
                exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
                return exchange.getResponse().setComplete();
            }
            // N·∫øu h·ª£p l·ªá
            return chain.filter(exchange);
        };
    }

    public static class Config {
        // N·∫øu c·∫ßn c·∫•u h√¨nh g√¨ th√™m
    }
}
