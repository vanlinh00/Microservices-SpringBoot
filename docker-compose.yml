version: '3.8'  # Phiên bản Docker Compose

services:

  # Zookeeper - bắt buộc cho Kafka (phiên bản truyền thống)
  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes  # Cho phép không cần xác thực khi kết nối
    ports:
      - "2181:2181"                 # Cổng mặc định Zookeeper
    networks:
      - backend-network             # Cùng mạng để Kafka server và các service khác có thể kết nối

  # Kafka server - hệ thống message queue
  kafka-server:
    image: bitnami/kafka:3.5
    container_name: kafka-server
    ports:
      - "9092:9092"                 # Cổng Kafka chính để producer/consumer kết nối
    environment:
      - KAFKA_BROKER_ID=1                              # ID duy nhất cho Kafka broker
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181     # Kết nối đến zookeeper container
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-server:9092  # Địa chỉ Kafka công bố cho client
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092   # Kafka lắng nghe trên tất cả IP
      - ALLOW_PLAINTEXT_LISTENER=yes                   # Cho phép kết nối không bảo mật (PLAINTEXT)
    depends_on:
      - zookeeper                      # Kafka sẽ không khởi động nếu zookeeper chưa chạy
    networks:
      - backend-network               # Cùng mạng backend để các service khác truy cập Kafka

  postgres-service:      # Service chạy PostgreSQL, cung cấp database chung cho các service khác
    image: postgres:15   # Dùng image chính thức PostgreSQL phiên bản 15
    environment:         # Biến môi trường để cấu hình PostgreSQL khi container khởi động
      POSTGRES_USER: postgres       # Tên user mặc định cho PostgreSQL
      POSTGRES_PASSWORD: 12345      # Mật khẩu cho user postgres
      POSTGRES_DB: postgres          # Tên database mặc định sẽ được tạo khi khởi động
    ports:
      - "5432:5432"      # Map cổng 5432 của container ra ngoài máy host (để bạn có thể truy cập trực tiếp nếu cần)
    networks:
      - backend-network  # Kết nối container này vào mạng riêng backend-network

  auth-service:
    build:
      context: ./auth-service   # Thư mục chứa Dockerfile của service auth-service, dùng để build image
    image: auth-service:latest  # Tên image và tag sau khi build xong
    ports:
      - "8081:8080"             # Map cổng 8080 trong container ra cổng 8081 trên máy host (bạn truy cập auth-service qua localhost:8081)
    networks:
      - backend-network         # Kết nối auth-service vào mạng backend-network để có thể giao tiếp với các service khác
    environment:
      # Các biến môi trường để cấu hình datasource của Spring Boot (kết nối database)
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-service:5432/postgres
      # URL kết nối tới database PostgreSQL, dùng hostname là tên service postgres-service trong Docker network
      SPRING_DATASOURCE_USERNAME: postgres    # Tên user database
      SPRING_DATASOURCE_PASSWORD: 12345       # Mật khẩu database

  pickup-service:
    build:
      context: ./pickup-service   # Thư mục chứa Dockerfile của pickup-service
    image: pickup-service:latest  # Tên image và tag
    ports:
      - "8082:8082"               # Map cổng 8082 (trái) trong container ra cổng 8082 trên máy host (truy cập pickup-service qua localhost:8082)
    networks:
      - backend-network           # Kết nối vào mạng backend-network để giao tiếp với auth-service và postgres-service
    environment:
      AUTH_SERVICE_URL: http://auth-service:8080  # Biến môi trường dùng để pickup-service gọi tới auth-service (hostname là tên service trên Docker network)
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-service:5432/postgres  # Kết nối DB tương tự auth-service
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 12345

  delivery-service:
    build:
      context: ./delivery-service   # Thư mục chứa Dockerfile của pickup-service
    image: delivery-service:latest  # Tên image và tag
    ports:
      - "8089:8089"               # Map cổng 8082 (trái) trong container ra cổng 8082 trên máy host (truy cập pickup-service qua localhost:8082)
    networks:
      - backend-network           # Kết nối vào mạng backend-network để giao tiếp với auth-service và postgres-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-service:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 12345

networks:
  backend-network:
    driver: bridge    # Loại mạng Docker bridge (mặc định), tạo mạng nội bộ cho các container cùng kết nối và giao tiếp với nhau
