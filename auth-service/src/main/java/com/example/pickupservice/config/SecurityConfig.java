package com.example.pickupservice.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Lazy;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;


/*
Frontend]
     |
     v
[API Gateway] <--> [Authentication Service]
     |
     +--> [Pickup Service]
     |
     +--> [Delivery Service]

 */


/*
üîê Vai tr√≤ c·ªßa Authentication Service:
Cung c·∫•p c√°c API nh∆∞:

POST /auth/login ‚Üí tr·∫£ v·ªÅ JWT token

POST /auth/register

GET /auth/me ‚Üí th√¥ng tin ng∆∞·ªùi d√πng

Khi user ƒëƒÉng nh·∫≠p th√†nh c√¥ng, token s·∫Ω ƒë∆∞·ª£c tr·∫£ v·ªÅ ‚Üí Frontend/Client s·∫Ω g·∫Øn token n√†y v√†o c√°c request ti·∫øp theo.

 */


@Configuration
@EnableWebSecurity
public class SecurityConfig {

//    @Autowired
//    @Lazy
//    private JwtAuthenticationFilter jwtAuthFilter;


    @Bean  //ƒê√¢y l√† m·ªôt bean c·∫•u h√¨nh b·∫£o m·∫≠t
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                // B∆∞·ªõc 1:  nh·∫≠n v√†o  http
                .csrf(csrf -> csrf.disable())

                // B∆∞·ªõc 2:
                // addFilterBefore(...) ch·∫°y tr∆∞·ªõc

                //  .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class)
                // B∆∞·ªõc 3: cho ph√©p c√°c endpoint n√†o ƒë∆∞·ª£c ƒëi qua
                .authorizeHttpRequests(auth -> auth
                        //kh√¥ng c·∫ßn JWT
                        .requestMatchers(
                                "/api/public/**",
                                "/auth/**"
                        ).permitAll()  //
                        // c√°c enpoint n√†o ph·∫£i ki·∫øm tra JWT
                        .anyRequest().authenticated()
                )
//                .sessionManagement(session ->
//                        session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)
//                )
        ;
        return http.build();
    }


    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {
        return authConfig.getAuthenticationManager();
    }

}

/*üîÑ Lu·ªìng ho·∫°t ƒë·ªông c∆° b·∫£n:
üë§ User login ·ªü authentication-service
üëâ Nh·∫≠n l·∫°i accessToken (JWT).

üöÄ Client g·ª≠i request ƒë·∫øn c√°c service kh√°c nh∆∞:

pickup-service

delivery-service

‚ûï G·∫Øn accessToken v√†o header:

http
Copy
Edit
Authorization: Bearer <accessToken>
üõ°Ô∏è C√°c service decode JWT ‚Üí bi·∫øt user n√†o, role g√¨
üëâ C√≥ th·ªÉ ch·∫∑n n·∫øu kh√¥ng c√≥ quy·ªÅn ho·∫∑c token sai.

*/